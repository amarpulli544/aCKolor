{"version":3,"sources":["ckolorpicker-factory.js","ckolorpicker-hex-input-directive.js","ckolorpicker-input-directive.js","ckolorpicker-wheel-directive.js"],"names":["aCKolor","factory","self","alpha","ckoloring","defaultColor","display","inputHsl","h","s","l","hex","hsl","hues","model","modelId","originalFormat","previousColors","rgb","r","g","b","circleWidth","init","data","validHex","previous","angular","fromJson","localStorage","aCKolorPreviousColors","current","convertTo","hslToRgb","rgbToHex","save","indexOf","unshift","length","toJson","toggleCKoloring","previousColorClick","color","updateHSL","updateColorDisplay","updateRGB","rgbToHsl","updateHEX","result","exec","hexToRgb","chars","split","shift","concat","join","hueLightFromRadial","e","wheel","x","y","changedTouches","clientX","clientY","pageX","pageY","rect","getBoundingClientRect","radius","width","left","top","cx","cy","dx","dy","angle","Math","atan2","PI","degrees","absoluteX","abs","absoluteY","lightness","round","sqrt","radialXY","outerRadius","cos","sin","str","substring","parseInt","max","min","d","isNaN","m","c","isFinite","intToHex","i","toString","module","directive","restrict","require","link","scope","elm","attr","ngModel","into","$parsers","push","$document","CKolorFactory","$compile","$timeout","onChange","elementId","inputId","name","type","blur","template","clearBlurs","undefined","$body","removeClass","setCircleWidth","offsetWidth","body","element","querySelector","text","possible","charAt","floor","random","content","append","addClass","$watch","newVal","oldVal","valid","colors","test","remove","$window","saturation","srect","wheelMove","updateHueLightFromRadial","saturationMove","saturationValue","mouseUpped","removeEventListener","wheelDown","addEventListener","saturationDown","$watchCollection","hls"],"mappings":"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","file":"aCKolor.min.js","sourcesContent":["(function(aCKolor) {\r\n\taCKolor.factory('CKolorFactory', function(){\r\n\t\tvar self = {\r\n\t\t\talpha: 100,\r\n\t\t\tckoloring: false,   // Flag that determines if the color wheel is open or not\r\n\t\t\tdefaultColor: '#FFFFFF', // If model is null, default to this\r\n\t\t\tdisplay: 'hex',     // Color mode that is displayed, auto selected by model's color mode and changed by the dropdown selection\r\n\t\t\tinputHsl: {         // HSL number input values - hue, saturation, lightness\r\n\t\t\t\th: null,\r\n\t\t\t\ts: null,\r\n\t\t\t\tl: null\r\n\t\t\t},\r\n\t\t\thex: null,          // Hex input value\r\n\t\t\thsl: {              // HSL values. The factory converts the model to HSL then sets the other types. Used on the color wheel and saturation slider.\r\n\t\t\t\th: null,\r\n\t\t\t\ts: null,\r\n\t\t\t\tl: null\r\n\t\t\t},\r\n\t\t\thues: [ 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 245, 255, 265, 275, 285, 295, 305, 315, 325, 335, 345, 355, 5, 15, 25, 35, 45, 55, 65 ], // 36 values of hue degrees used on the color wheel background\r\n\t\t\tmodel: null,        // The given color value\r\n\t\t\tmodelId: null,      // The id of the given model. When there are multiple colorpickers, this is used by the directives to determine which model is currently being worked on so they aren't all updated\r\n\t\t\toriginalFormat: null, // The original format of the model. HSL, Hex, or RGB\r\n\t\t\tpreviousColors: [], // Previous chosen colors. Global and stored to localStorage\r\n\t\t\trgb: {              // RGB input value. Red, Green, Blue\r\n\t\t\t\tr: null,\r\n\t\t\t\tg: null,\r\n\t\t\t\tb: null\r\n\t\t\t},\r\n\t\t\tcircleWidth: 0,     // The width of the color wheel\r\n\r\n\t\t\t/* Called from the input directive to initialize the color wheel with it's values */\r\n\t\t\tinit: function(data){\r\n\t\t\t\tself.alpha = 100;\r\n\r\n\t\t\t\t/* Given model info */\r\n\t\t\t\tself.defaultColor = data.defaultColor ? self.validHex(data.defaultColor) : '#FFFFFF';\r\n\t\t\t\tself.model = data.model;\r\n\t\t\t\tself.modelId = data.modelId;\r\n\t\t\t\tvar previous = angular.fromJson(localStorage.aCKolorPreviousColors);\r\n\t\t\t\tif(previous){\r\n\t\t\t\t\tself.previousColors = previous;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* Convert the color data */\r\n\t\t\t\tvar current = self.convertTo(); /* To HSL */\r\n\t\t\t\tif(current){\r\n\t\t\t\t\tself.hsl.h = self.inputHsl.h = current.h;\r\n\t\t\t\t\tself.hsl.s = self.inputHsl.s = current.s;\r\n\t\t\t\t\tself.hsl.l = self.inputHsl.l = current.l;\r\n\t\t\t\t\tself.rgb = self.hslToRgb(current);\r\n\t\t\t\t\tself.hex = self.rgbToHex(self.rgb);\r\n\r\n\t\t\t\t\t/* Set the display to be original format, ie hex->hex */\r\n\t\t\t\t\tself.display = self.originalFormat;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/* Updates the model and toggles the ckoloring flag off */\r\n\t\t\tsave: function(){\r\n\t\t\t\t/* convert back to original format */\r\n\t\t\t\tif(self.alpha === 100){\r\n\t\t\t\t\tswitch(self.originalFormat){\r\n\t\t\t\t\t\tcase 'hex': self.model = self.hex; break;\r\n\t\t\t\t\t\tcase 'hsl': self.model = 'hsl(' + self.hsl.h + ',' + self.hsl.s + '%,' + self.hsl.l + '%)'; break;\r\n\t\t\t\t\t\tcase 'rgb': self.model = 'rgb(' + self.rgb.r + ',' + self.rgb.g + ',' + self.rgb.b + ')'; break;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(self.originalFormat === 'hsl'){\r\n\t\t\t\t\t\tself.model = 'hsla(' + self.hsl.h + ',' + self.hsl.s + '%,' + self.hsl.l + '%' + ',' + (self.alpha / 100) + ')';\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tself.model = 'rgba(' + self.rgb.r + ',' + self.rgb.g + ',' + self.rgb.b + ',' + (self.alpha / 100) + ')';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(self.previousColors.indexOf(self.model) === -1){\r\n\t\t\t\t\tself.previousColors.unshift(self.model);\r\n\t\t\t\t\tif(self.previousColors.length > 20){\r\n\t\t\t\t\t\tself.previousColors.length = 20;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlocalStorage.aCKolorPreviousColors = angular.toJson(self.previousColors);\r\n\t\t\t\t}\r\n\t\t\t\tself.toggleCKoloring();\r\n\t\t\t},\r\n\r\n\t\t\tpreviousColorClick: function(color){\r\n\t\t\t\tvar originalFormat = self.originalFormat;\r\n\t\t\t\tvar current = self.convertTo(color); /* To HSL */\r\n\t\t\t\tif(current){\r\n\t\t\t\t\tself.hsl.h = self.inputHsl.h = current.h;\r\n\t\t\t\t\tself.hsl.s = self.inputHsl.s = current.s;\r\n\t\t\t\t\tself.hsl.l = self.inputHsl.l = current.l;\r\n\t\t\t\t\tself.rgb = self.hslToRgb(current);\r\n\t\t\t\t\tself.hex = self.rgbToHex(self.rgb);\r\n\r\n\t\t\t\t\t/* Set the display to be original format, ie hex->hex */\r\n\t\t\t\t\tself.display = self.originalFormat;\r\n\t\t\t\t}\r\n\t\t\t\tself.updateHSL();\r\n\t\t\t},\r\n\r\n\t\t\t/* Toggles ckoloring off */\r\n\t\t\ttoggleCKoloring: function(){\r\n\t\t\t\tself.ckoloring = false;\r\n\t\t\t},\r\n\r\n\t\t\t/* Updates the display to the given parameter */\r\n\t\t\tupdateColorDisplay: function(display){\r\n\t\t\t\tself.display = display;\r\n\t\t\t\treturn self.display;\r\n\t\t\t},\r\n\r\n\t\t\t/* Convert other color models when this is called */\r\n\t\t\tupdateHSL: function(){\r\n\t\t\t\tself.hex = self.rgbToHex(self.hslToRgb(self.hsl));\r\n\t\t\t\tself.rgb = self.hslToRgb(self.hsl);\r\n\t\t\t\tself.inputHsl = self.hsl;\r\n\t\t\t},\r\n\r\n\t\t\t/* Convert other color models when this is called */\r\n\t\t\tupdateRGB: function(){\r\n\t\t\t\tself.hex = self.rgbToHex(self.rgb);\r\n\t\t\t\tself.hsl = self.rgbToHsl(self.rgb);\r\n\t\t\t},\r\n\r\n\t\t\t/* Convert other color models when this is called */\r\n\t\t\tupdateHEX: function(){\r\n\t\t\t\t/* Make sure it's a valid hex string */\r\n\t\t\t\tself.hex = self.validHex(self.hex);\r\n\r\n\t\t\t\tvar result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(self.hex);\r\n\t\t\t\tif(self.hex && self.hex.length === 7 && result){\r\n\t\t\t\t\tself.rgb = self.hexToRgb(self.hex);\r\n\t\t\t\t\tself.hsl = self.rgbToHsl(self.rgb);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tvalidHex: function(data){\r\n\t\t\t\tvar chars = data.split('');\r\n\r\n\t\t\t\tif(chars[0] === '#'){\r\n\t\t\t\t\tchars.shift();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(chars.length === 3){\r\n\t\t\t\t\tchars = chars.concat(chars);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdata = '#' + chars.join('');\r\n\r\n\t\t\t\treturn data;\r\n\t\t\t},\r\n\r\n\t\t\t/* Conversion Utilities */\r\n\r\n\t\t\t/* Get HSL from a point on color wheel */\r\n\t\t\thueLightFromRadial: function(e, wheel){\r\n\t\t\t\tvar x, y;\r\n\r\n\t\t\t\t/* handle touch event */\r\n\t\t\t\tif (e.changedTouches) {\r\n\t\t\t\t\tx = e.changedTouches[0].clientX;\r\n\t\t\t\t\ty = e.changedTouches[0].clientY;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tx = e.pageX;\r\n\t\t\t\t\ty = e.pageY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* Get color wheel dimensions */\r\n\t\t\t\tvar rect = wheel.getBoundingClientRect();\r\n\t\t\t\tvar radius = rect.width / 2;\r\n\t\t\t\tvar left = rect.left;\r\n\t\t\t\tvar top = rect.top;\r\n\r\n\t\t\t\t/* Color wheel center points */\r\n\t\t\t\tvar cx = radius + left;\r\n\t\t\t\tvar cy = radius + top;\r\n\r\n\t\t\t\t/* Mouse position distance from color wheel center */\r\n\t\t\t\tvar dx = x - cx;\r\n\t\t\t\tvar dy = y - cy;\r\n\r\n\t\t\t\t/* Hue degrees */\r\n\t\t\t\tvar angle = Math.atan2(dy, dx) * (180 / Math.PI);\r\n\t\t\t\tvar degrees = angle;\r\n\t\t\t\tif(degrees < 0){\r\n\t\t\t\t\tdegrees = degrees + 360;\r\n\t\t\t\t}\r\n\r\n\r\n\r\n\r\n\t\t\t\t/* Lightness */\r\n\t\t\t\tvar absoluteX = Math.abs(dx);\r\n\t\t\t\tvar absoluteY = Math.abs(dy);\r\n\t\t\t\tvar lightness = Math.round(100 - ((Math.sqrt((absoluteX * absoluteX) + (absoluteY * absoluteY)) * 100) / radius));\r\n\r\n\t\t\t\t/* Set Hue and Lightnes, update other values and scoop positions */\r\n\t\t\t\tself.hsl.l = lightness > -1 ? lightness < 101 ? lightness : 100 : 0;\r\n\t\t\t\tself.hsl.h = (Math.round(degrees) > -1 || Math.round(degrees) < 360)? Math.round(degrees) : 0 ;\r\n\t\t\t\tself.updateHSL();\r\n\t\t\t\tself.radialXY();\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\th: self.hsl.h,\r\n\t\t\t\t\tl: self.hsl.l\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\t/* Set scoop position based on HSL values */\r\n\t\t\tradialXY: function(){\r\n\t\t\t\tvar outerRadius = self.circleWidth / 2;\r\n\t\t\t\tvar radius = outerRadius * ((100 - self.hsl.l) / 100);\r\n\t\t\t\tvar degrees = self.hsl.h;\r\n\t\t\t\tvar x = outerRadius + (radius * Math.cos(degrees * Math.PI / 180));\r\n\t\t\t\tvar y = (outerRadius * 2) - (outerRadius + -(radius * Math.sin(degrees * Math.PI / 180)));\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tx: x,\r\n\t\t\t\t\ty: y\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\t/* Convert color string to HSL */\r\n\t\t\tconvertTo: function(str){\r\n\t\t\t\t/* If not supplied, use the given model */\r\n\t\t\t\tstr = (!str) ? self.model ? self.model : 'null' : str;\r\n\r\n\t\t\t\tvar rgb;\r\n\r\n\t\t\t\t/* If hex */\r\n\t\t\t\tif(str.indexOf('#') > -1){\r\n\t\t\t\t\tstr = self.validHex(str);\r\n\t\t\t\t\trgb = self.hexToRgb(str);\r\n\t\t\t\t\tself.originalFormat = 'hex';\r\n\t\t\t\t\treturn self.rgbToHsl(rgb);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* If HSL */\r\n\t\t\t\telse if(str.indexOf('hsla') > -1){\r\n\t\t\t\t\tstr = str.split('(')[1];\r\n\t\t\t\t\tstr = str.substring(0, str.length - 1);\r\n\t\t\t\t\tstr = str.split(',');\r\n\t\t\t\t\tself.originalFormat = 'hsl';\r\n\t\t\t\t\tself.alpha = str[3] * 100;\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\th: parseInt(str[0]),\r\n\t\t\t\t\t\ts: parseInt(str[1]),\r\n\t\t\t\t\t\tl: parseInt(str[2])\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if(str.indexOf('hsl') > -1){\r\n\t\t\t\t\tstr = str.split('(')[1];\r\n\t\t\t\t\tstr = str.substring(0, str.length - 1);\r\n\t\t\t\t\tstr = str.split(',');\r\n\t\t\t\t\tself.originalFormat = 'hsl';\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\th: parseInt(str[0]),\r\n\t\t\t\t\t\ts: parseInt(str[1]),\r\n\t\t\t\t\t\tl: parseInt(str[2])\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* If RGB */\r\n\t\t\t\telse if(str.indexOf('rgba') > -1){\r\n\t\t\t\t\tstr = str.split('(')[1];\r\n\t\t\t\t\tstr = str.substring(0, str.length - 1);\r\n\t\t\t\t\tstr = str.split(',');\r\n\t\t\t\t\tself.originalFormat = 'rgb';\r\n\t\t\t\t\tself.alpha = str[3] * 100;\r\n\t\t\t\t\treturn self.rgbToHsl({\r\n\t\t\t\t\t\tr: parseInt(str[0]),\r\n\t\t\t\t\t\tg: parseInt(str[1]),\r\n\t\t\t\t\t\tb: parseInt(str[2])\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if(str.indexOf('rgb') > -1){\r\n\t\t\t\t\tstr = str.split('(')[1];\r\n\t\t\t\t\tstr = str.substring(0, str.length - 1);\r\n\t\t\t\t\tstr = str.split(',');\r\n\t\t\t\t\tself.originalFormat = 'rgb';\r\n\t\t\t\t\treturn self.rgbToHsl({\r\n\t\t\t\t\t\tr: parseInt(str[0]),\r\n\t\t\t\t\t\tg: parseInt(str[1]),\r\n\t\t\t\t\t\tb: parseInt(str[2])\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if(str.indexOf('transparent') > -1){\r\n\t\t\t\t\tself.originalFormat = 'rgb';\r\n\t\t\t\t\tself.alpha = 0;\r\n\t\t\t\t\trgb = self.hexToRgb(self.defaultColor);\r\n\t\t\t\t\treturn self.rgbToHsl(rgb);\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse{\r\n\t\t\t\t\tself.originalFormat = 'rgb';\r\n\t\t\t\t\trgb = self.hexToRgb(self.defaultColor);\r\n\t\t\t\t\treturn self.rgbToHsl(rgb);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/* Sourced from http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */\r\n\t\t\thexToRgb: function(hex) {\r\n\t\t\t\tvar result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\t\t\t\treturn result ? {\r\n\t\t\t\t\tr: parseInt(result[1], 16),\r\n\t\t\t\t\tg: parseInt(result[2], 16),\r\n\t\t\t\t\tb: parseInt(result[3], 16)\r\n\t\t\t\t} : null;\r\n\t\t\t},\r\n\r\n\t\t\t/* Sourced from http://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion */\r\n\t\t\trgbToHsl: function(rgb){\r\n\t\t\t\tvar r = rgb.r / 255;\r\n\t\t\t\tvar g = rgb.g / 255;\r\n\t\t\t\tvar b = rgb.b / 255;\r\n\t\t\t\tvar max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n\t\t\t\tvar h, s, l = (max + min) / 2;\r\n\r\n\t\t\t\tif(max == min){\r\n\t\t\t\t\th = s = 0; // achromatic\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvar d = max - min;\r\n\t\t\t\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n\t\t\t\t\tswitch(max){\r\n\t\t\t\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n\t\t\t\t\t\tcase g: h = (b - r) / d + 2; break;\r\n\t\t\t\t\t\tcase b: h = (r - g) / d + 4; break;\r\n\t\t\t\t\t}\r\n\t\t\t\t\th /= 6;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(h === 0 || isNaN(h)){\r\n\t\t\t\t\th = self.hsl.h;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\th: (Math.round((h * 360) * 100)) / 100,\r\n\t\t\t\t\ts: (Math.round((s * 100) * 100)) / 100,\r\n\t\t\t\t\tl: (Math.round((l * 100) * 100)) / 100\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\t/* Source from http://hsl2rgb.nichabi.com/javascript-function.php */\r\n\t\t\thslToRgb: function(hsl){\r\n\t\t\t\tvar h = hsl.h;\r\n\t\t\t\tvar s = hsl.s;\r\n\t\t\t\tvar l = hsl.l;\r\n\t\t\t\tvar r, g, b, m, c, x;\r\n\r\n\t\t\t\tif (!isFinite(h)) h = 0;\r\n\t\t\t\tif (!isFinite(s)) s = 0;\r\n\t\t\t\tif (!isFinite(l)) l = 0;\r\n\r\n\t\t\t\th /= 60;\r\n\t\t\t\tif (h < 0) h = 6 - (-h % 6);\r\n\t\t\t\th %= 6;\r\n\r\n\t\t\t\ts = Math.max(0, Math.min(1, s / 100));\r\n\t\t\t\tl = Math.max(0, Math.min(1, l / 100));\r\n\r\n\t\t\t\tc = (1 - Math.abs((2 * l) - 1)) * s;\r\n\t\t\t\tx = c * (1 - Math.abs((h % 2) - 1));\r\n\r\n\t\t\t\tif (h < 1) {\r\n\t\t\t\t\tr = c;\r\n\t\t\t\t\tg = x;\r\n\t\t\t\t\tb = 0;\r\n\t\t\t\t} else if (h < 2) {\r\n\t\t\t\t\tr = x;\r\n\t\t\t\t\tg = c;\r\n\t\t\t\t\tb = 0;\r\n\t\t\t\t} else if (h < 3) {\r\n\t\t\t\t\tr = 0;\r\n\t\t\t\t\tg = c;\r\n\t\t\t\t\tb = x;\r\n\t\t\t\t} else if (h < 4) {\r\n\t\t\t\t\tr = 0;\r\n\t\t\t\t\tg = x;\r\n\t\t\t\t\tb = c;\r\n\t\t\t\t} else if (h < 5) {\r\n\t\t\t\t\tr = x;\r\n\t\t\t\t\tg = 0;\r\n\t\t\t\t\tb = c;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tr = c;\r\n\t\t\t\t\tg = 0;\r\n\t\t\t\t\tb = x;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tm = l - c / 2;\r\n\t\t\t\tr = Math.round((r + m) * 255);\r\n\t\t\t\tg = Math.round((g + m) * 255);\r\n\t\t\t\tb = Math.round((b + m) * 255);\r\n\r\n\t\t\t\treturn { r: r, g: g, b: b };\r\n\t\t\t},\r\n\r\n\t\t\tintToHex: function(i) {\r\n\t\t\t\tvar hex = parseInt(i).toString(16);\r\n\t\t\t\treturn (hex.length < 2) ? \"0\" + hex : hex;\r\n\t\t\t},\r\n\r\n\t\t\trgbToHex: function(rgb){\r\n\t\t\t\treturn '#' + self.intToHex(rgb.r) + self.intToHex(rgb.g) + self.intToHex(rgb.b);\r\n\t\t\t}\r\n\r\n\t\t};\r\n\t\treturn self;\r\n\t})\r\n\t;\r\n})(angular.module('aCKolor',[]));\r\n","(function(aCKolor) {\r\n\t'use strict';\r\n\r\n\taCKolor.directive('aCkolorHexInput', function(){\r\n\t\treturn {\r\n\t\t\trestrict: 'A',\r\n\t\t\trequire: 'ngModel',\r\n\t\t\tlink: function(scope, elm, attr, ngModel) {\r\n\r\n\t\t\t\tfunction into(data) {\r\n\t\t\t\t\tvar chars = data.split('');\r\n\r\n\t\t\t\t\tif(chars[0] === '#'){\r\n\t\t\t\t\t\tchars.shift();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(chars.length === 3){\r\n\t\t\t\t\t\tchars = chars.concat(chars);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdata = '#' + chars.join('');\r\n\r\n\t\t\t\t\treturn data;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tngModel.$parsers.push(into);\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n})(angular.module('aCKolor'));\r\n","(function(aCKolor) {\r\n    /* MARKUP\r\n     * <a-ckolor element-id=\"'an_id'\" input-id=\"'inputs'\" model=\"app.color\" name=\"'color-input'\" type=\"'hidden'\"></a-ckolor>\r\n     */\r\n\r\n    aCKolor.directive('aCkolor', function($document, CKolorFactory, $compile, $timeout){\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n\t\t\t\tonChange: '=?',\r\n                elementId: '=',     // OPTIONAL: The id of container element\r\n                inputId: '=',       // OPTIONAL: the id of the input\r\n                model:'=',          // The model to watch\r\n                name: '=',          // OPTIONAL: input name\r\n                type: '=',          // Type of input\r\n                defaultColor: '=',  // OPTIONAL: If the model is an invalid color string, use this instead\r\n\t\t\t\tblur: '='   \t\t// OPTIONAL: Enable or disable the css blur filter behind the overlay. Enabled by default\r\n            },\r\n            templateUrl: '../html/ackolor.html',\r\n            link: function(scope,elm){\r\n\r\n                var makeid = function(){\r\n                    var text = \"\";\r\n                    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n                    for(var i=0;i<35;i++){text+=possible.charAt(Math.floor(Math.random()*possible.length));}\r\n                    return text;\r\n                };\r\n\r\n                /* DOM Definitions */\r\n                var body = $document[0].body;\r\n\t\t\t\tvar $body = angular.element(body);\r\n\t\t\t\tvar wheel = body.querySelector('.c-ckolor__wheel');\r\n                /* End DOM Definitions */\r\n\r\n\r\n                function clearBlurs(){\r\n\t\t\t\t\tif(scope.blur === true || scope.blur === undefined){\r\n\t\t\t\t\t\t$body.removeClass('c-ckolor__overlay-blur');\r\n\t\t\t\t\t}\r\n                    $body.removeClass('c-ckolor__modal');\r\n                }\r\n\r\n\t\t\t\tfunction setCircleWidth(){\r\n\t\t\t\t\tif(wheel && wheel.offsetWidth){\r\n\t\t\t\t\t\tCKolorFactory.circleWidth = wheel.offsetWidth;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t$timeout(function(){\r\n\t\t\t\t\t\t\tsetCircleWidth();\r\n\t\t\t\t\t\t}, 200);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n                /* Make a random id */\r\n                var modelId = makeid();\r\n                scope.CKolorFactory = CKolorFactory;\r\n\r\n                if(!scope.type){\r\n                    scope.type = 'hidden';\r\n                }\r\n\r\n                /* Toggles the color wheel */\r\n                scope.toggleCKoloring = function(){\r\n\t\t\t\t\tvar existing = body.querySelector('a-ckolor-wheel');\r\n\t\t\t\t\tif(!existing){\r\n\t\t\t\t\t\tvar template = '<a-ckolor-wheel></a-ckolor-wheel>';\r\n\t\t\t\t\t\tvar content = $compile(template)(scope);\r\n\t\t\t\t\t\t$body.append(content);\r\n\t\t\t\t\t\twheel = body.querySelector('.c-ckolor__wheel');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(scope.blur === true || scope.blur === undefined){\r\n\t\t\t\t\t\t$body.addClass('c-ckolor__overlay-blur');\r\n\t\t\t\t\t}\r\n                    $body.addClass('c-ckolor__modal');\r\n\r\n                    /* Init color wheel */\r\n                    CKolorFactory.init({\r\n                        model: scope.model,\r\n                        modelId: modelId,\r\n                        defaultColor: scope.defaultColor\r\n                    });\r\n\r\n                    /* Open color wheel */\r\n                    CKolorFactory.ckoloring = true;\r\n\t\t\t\t\tsetCircleWidth();\r\n                };\r\n\r\n                /* When CKolorFactory.save() is called and the model is updated */\r\n                scope.$watch(function(){return CKolorFactory.model;}, function(newVal, oldVal){\r\n\r\n                    /* If model update and is this directive's model */\r\n                    if(newVal !== oldVal && CKolorFactory.modelId === modelId && newVal !== scope.model){\r\n                        /* Clear blurring classes */\r\n                        clearBlurs();\r\n\r\n\t\t\t\t\t\tvar valid, colors, i;\r\n\r\n                        /* Validate the colors, update only if valid */\r\n                        switch(CKolorFactory.originalFormat){\r\n                            case 'hex':\r\n                                valid = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(CKolorFactory.model);\r\n                                if(valid){ scope.model = CKolorFactory.model; }\r\n                                break;\r\n                            case 'rgb':\r\n                                try{\r\n                                    colors = CKolorFactory.model.split('(')[1].split(')')[0].split(',');\r\n                                    valid = true;\r\n                                    for (i=0;i<colors.length;i++) {\r\n                                        colors[i] = parseInt(colors[i]);\r\n                                        if (isNaN(colors[i]) || colors[i] > 255 || colors[i] < 0) {\r\n                                            valid = false;\r\n                                        }\r\n                                    }\r\n                                    if(valid){ scope.model = CKolorFactory.model; }\r\n                                }catch(e){}\r\n                                break;\r\n                            case 'hsl':\r\n                                try{\r\n                                    colors = CKolorFactory.model.split('(')[1].split(')')[0].split(',');\r\n                                    valid = true;\r\n                                    for (i=0;i<colors.length;i++) {\r\n                                        colors[i] = parseInt(colors[i]);\r\n                                        if(i === 0){\r\n                                            if (isNaN(colors[i]) || colors[i] > 360 || colors[i] < 0) {\r\n                                                valid = false;\r\n                                            }\r\n                                        }else{\r\n                                            if (isNaN(colors[i]) || colors[i] > 100 || colors[i] < 0) {\r\n                                                valid = false;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if(valid){ scope.model = CKolorFactory.model; }\r\n                                }catch(e){}\r\n                                break;\r\n                        }\r\n\r\n\t\t\t\t\t\tif(scope.onChange){\r\n\t\t\t\t\t\t\tscope.onChange(scope.model);\r\n\t\t\t\t\t\t}\r\n\r\n                    }\r\n                });\r\n\r\n                /* On color wheel closing, clear the blurring classes */\r\n                scope.$watch(function(){return CKolorFactory.ckoloring;}, function(newVal, oldVal){\r\n                    if(CKolorFactory.ckoloring === false && CKolorFactory.modelId === modelId){\r\n                        clearBlurs();\r\n\r\n                        /* Also don't reuse the existing color wheel (in this HABPanel fork) - @ghys */\r\n                        if (wheel) {\r\n                            var el = body.querySelector('a-ckolor-wheel');\r\n                            el.remove();\r\n                            wheel = null;\r\n                    }                    }\r\n                });\r\n            }\r\n        };\r\n    });\r\n})(angular.module('aCKolor'));\r\n","(function(aCKolor) {\r\n    /* MARKUP\r\n     * <a-ckolor-wheel></a-ckolor-wheel>\r\n     */\r\n    aCKolor.directive('aCkolorWheel', function($timeout, $document, CKolorFactory, $window){\r\n        return {\r\n            restrict: 'E',\r\n            templateUrl: '../html/ackolor-wheel.html',\r\n            link: function(scope,elm){\r\n                scope.CKolorFactory = CKolorFactory;\r\n\r\n                /* DOM Definitions */\r\n                var body = $document[0].body;\r\n                var wheel = elm[0].querySelector('.c-ckolor__wheel-value');\r\n                var scoop = elm[0].querySelector('.c-ckolor__wheel-scoop');\r\n                var closeBtn = elm[0].querySelector('.c-ckolor__close-btn');\r\n                var saveBtn = elm[0].querySelector('.c-ckolor__save-btn');\r\n                var saturation = elm[0].querySelector('.c-ckolor__saturation');\r\n                var saturationHandle = elm[0].querySelector('.c-ckolor__saturation-handle');\r\n                var alpha = elm[0].querySelector('.c-ckolor__alpha');\r\n                var alphaHandle = elm[0].querySelector('.c-ckolor__alpha-handle');\r\n\t\t\t\tvar overlayInner = elm[0].querySelector('.c-ckolor__overlay-inner');\r\n                var rect = null;\r\n                var srect = null;\r\n                var arect = null;\r\n                /* End DOM Definitions */\r\n\r\n\r\n                /* DOM Manipulations */\r\n                /* Mouse movement on color wheel, update hue and lightness */\r\n\r\n                var wheelMove = function(e){\r\n\t\t\t\t\tif(!wheel){\r\n\t\t\t\t\t\twheel = elm[0].querySelector('.c-ckolor__wheel-value');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(wheel){\r\n\t\t\t\t\t\t$timeout(function(){CKolorFactory.hueLightFromRadial(e, wheel);});\r\n\t\t\t\t\t}\r\n                };\r\n\r\n\t\t\t\tscope.updateHueLightFromRadial = function(e){\r\n\t\t\t\t\twheelMove(e);\r\n\t\t\t\t};\r\n\r\n                /* Mouse movement on saturation slider, update saturation */\r\n                var saturationMove = function(e){\r\n                    var x = ((e.changedTouches) ? e.changedTouches[0].clientX : e.pageX) - (srect.left);\r\n\t\t\t\t\tvar saturationValue = Math.round((x / srect.width) * 100);\r\n\r\n\t\t\t\t\tif(saturationValue < 0){\r\n\t\t\t\t\t\tsaturationValue = 0;\r\n\t\t\t\t\t}else if(saturationValue > 100){\r\n\t\t\t\t\t\tsaturationValue = 100;\r\n\t\t\t\t\t}\r\n                    CKolorFactory.hsl.s = saturationValue;\r\n                    $timeout(function(){\r\n                        CKolorFactory.updateHSL();\r\n                    });\r\n                };\r\n\r\n                /* On body-> mouseup, clear out mousemove/touchmove event listeners */\r\n                var mouseUpped = function(e){\r\n                    body.removeEventListener('mousemove', wheelMove, true);\r\n                    body.removeEventListener('touchmove', wheelMove, true);\r\n                    body.removeEventListener('mousemove', saturationMove, true);\r\n                    body.removeEventListener('touchmove', saturationMove, true);\r\n                };\r\n\r\n                /* On mouse down, add mouse move and up listeners to detect dragging start/end */\r\n                var wheelDown = function(e){\r\n                    /* Color wheel dimensions */\r\n                    rect = wheel.getBoundingClientRect();\r\n                    /* Called to update colors if only a click */\r\n                    wheelMove(e);\r\n                    /* Add mouse move event listeners */\r\n                    body.addEventListener('mousemove', wheelMove, true);\r\n                    wheel.addEventListener('touchmove', wheelMove, false);\r\n                };\r\n\r\n                /* On mouse down, add mouse move and up listeners to detect dragging start/end */\r\n                var saturationDown = function(e){\r\n                    /* Saturation slider dimensions */\r\n                    srect = saturation.getBoundingClientRect();\r\n                    /* Called to update colors if only a click */\r\n                    saturationMove(e);\r\n                    /* Add mouse move event listeners */\r\n                    body.addEventListener('mousemove', saturationMove, true);\r\n                    saturation.addEventListener('touchmove', saturationMove, false);\r\n                };\r\n\r\n                wheel.addEventListener('mousedown', wheelDown, true);\r\n                wheel.addEventListener('touchstart', wheelDown, true);\r\n\r\n                saturation.addEventListener('mousedown', saturationDown, true);\r\n                saturation.addEventListener('touchstart', saturationDown, false);\r\n\r\n\t\t\t\tbody.addEventListener('mouseup', mouseUpped, true);\r\n                body.addEventListener('touchend', mouseUpped, false);\r\n                /* End DOM Manipulations */\r\n\r\n                /* If HSL is updated and valid, trigeer the other color formats to be updated */\r\n                scope.$watchCollection(function(){return CKolorFactory.hls;}, function(newVal, oldVal){\r\n                    if(\r\n                        newVal !== oldVal &&\r\n                        !isNaN(newVal.h) && !isNaN(newVal.l) && !isNaN(newVal.s) &&\r\n                        newVal.h >= 0 && newVal.h <= 360 &&\r\n                        newVal.l >= 0 && newVal.l <= 255 &&\r\n                        newVal.s >= 0 && newVal.s <= 255\r\n                    ){\r\n                        CKolorFactory.updateHSL();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    });\r\n})(angular.module('aCKolor'));\r\n"]}